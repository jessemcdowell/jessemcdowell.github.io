<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesse Builds Software</title>
  
  <subtitle>Jesse&#39;s thoughts on building quality software.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jessemcdowell.ca/"/>
  <updated>2023-06-26T17:55:24.167Z</updated>
  <id>https://jessemcdowell.ca/</id>
  
  <author>
    <name>Jesse McDowell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Automating Non-Non-Downtime Upgrades in Kubernetes with ArgoCD</title>
    <link href="https://jessemcdowell.ca/2023/06/Automating-Non-Non-Downtime-Upgrades-in-Kubernetes-with-ArgoCD/"/>
    <id>https://jessemcdowell.ca/2023/06/Automating-Non-Non-Downtime-Upgrades-in-Kubernetes-with-ArgoCD/</id>
    <published>2023-06-26T17:55:24.000Z</published>
    <updated>2023-06-26T17:55:24.167Z</updated>
    
    <content type="html"><![CDATA[<p>I recently worked on a project to move a complicated legacy application onto Kubernetes. It was quite an undertaking, but in the end we were successful. One of the biggest challenges was figuring out how to automate our legacy deployment process, one where the whole application has to be stopped completely for schema upgrades to run.</p><p>The normal “Kubernetes way” to upgrade an application is by changing the <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">Deployment resource</a>. With its default <code>RollingUpdate</code> strategy it will delete a pod with the old definition, start a pod with the new definition, wait for it to be healthy, then repeat continuously until the change is fully applied.</p><p>This process wouldn’t work for us, and it was not obvious how we could automate one that did. Our application is tied to its schema version; new versions of the app won’t run on the old schema, old versions of the app can’t run on the new schema, and the schema migrator won’t start if it detects any running applications. We would have preferred to use a rolling update without downtime, but it wasn’t possible to make our application support this in our timelines. I expect it will eventually be implemented, but it will require several changes and a significant testing effort.</p><p>The process we wanted to automate was:</p><ol><li>Shut down the old version of the application</li><li>Run the schema migrator</li><li>Start the new version of the application</li></ol><p>Or putting it into Kubernetes terms:</p><ol><li>Delete all the pods</li><li>Run the schema migrator job</li><li>Create new pods (with new image tag)</li></ol><p>We tried a few different approaches, but the solution we ultimately chose was using <a href="https://argoproj.github.io/cd/">ArgoCD</a> with its <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/">sync phases and waves feature</a>. There were a few unexpected challenges, but we were still happy with the results.</p><h2 id="What-is-ArgoCD-and-What-Are-Sync-Phases-and-Waves"><a href="#What-is-ArgoCD-and-What-Are-Sync-Phases-and-Waves" class="headerlink" title="What is ArgoCD and What Are Sync Phases and Waves?"></a>What is ArgoCD and What Are Sync Phases and Waves?</h2><p><a href="https://argoproj.github.io/cd/">ArgoCD</a> is a powerful open source tool that lets you deploy Helm charts to a Kubernetes cluster. The charts and their settings are pulled from a configurable source, in our case GitHub. This allowed us to store all our Kubernetes configuration as code. We wanted better visibility and consistency in our infrastructure and this tool makes that possible. Being able to add “GitOps” is an added bonus.</p><p>ArgoCD is based on a custom resource called an <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications">Application</a>. An application represents a single installation of a Helm chart. Its resource includes a source (where to retrieve the chart), a destination (where to install the chart), and any parameters to apply to the chart. You can automate more complicated scenarios with charts containing Applications, resulting in Applications containing Applications. You can also use the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/">ApplicationSet</a> resource to generate multiple Application objects. We combine all of these to push out a lot of similar but not exactly the same applications in several environments.</p><p>ArgoCD periodically compares the source (code) and destination (cluster state). If there are any differences, the application gets marked as out of sync. ArgoCD can synchronize all the changes in an application automatically or with the press of a button. It also has a nice user interface that shows all the applications, their state, and some other useful information.</p><p>If your application can be deployed all at once as a simple Helm chart, ArgoCD can easily do this. For a more complicated deployment process like ours, we used the sync phases and waves feature; we added special annotations in a few our resource definitions to control the order ArgoCD applies their changes. It looks like this:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">argocd.argoproj.io/hook:</span> <span class="string">PreSync</span></span><br><span class="line">    <span class="attr">argocd.argoproj.io/sync-wave:</span> <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure><h2 id="How-We-Automated-our-Deployment-Process"><a href="#How-We-Automated-our-Deployment-Process" class="headerlink" title="How We Automated our Deployment Process"></a>How We Automated our Deployment Process</h2><p>Our process uses these steps:</p><ol><li><code>PreSync</code> &#x2F; <code>-1</code> - Create necessary secrets, service accounts, etc.</li><li><code>PreSync</code> &#x2F; <code>10</code> - Create job: run a script that sets the replica count to 0</li><li><code>PreSync</code> &#x2F; <code>20</code> - Create job: run the schema migrator docker image</li><li><code>Sync</code> (default) - Create the deployment, services, and everything else</li></ol><p>The <code>PreSync</code> &#x2F; <code>10</code> step ensures the application is stopped before continuing. It checks that the deployment exists so it won’t fail on the very first run, then it sets the replica count to 0. The pods get deleted pretty quickly after this change is applied.</p><p>The schema migrator job runs next. It can upgrade the schema of an existing database or create a new one if one doesn’t already exists. Once it completes, all the rest of the resources are created in the <code>Sync</code> step. The deployment resource sets the new application version and restores the replica count. Pods start getting created, and pretty soon we have a fully working application.</p><p>If the schema migrator job fails, Kubernetes will execute any retries as per the job definition. If the job can’t complete, the synchronization cycle stops and gets marked as failed in ArgoCD. A human can then make any necessary changes and trigger another synchronization cycle.</p><p>We ran this process hundreds of times in our development environment and several more in our production environments. The ArgoCD part of it always worked correctly. Since some of our applications had an installation per tenant, we also ran several in parallel with no issues. We did have a few deployments fail, but they were all caused by infrastructure issues or application bugs. That won’t be different from any other Kubernetes system.</p><h2 id="Branching-Strategy"><a href="#Branching-Strategy" class="headerlink" title="Branching Strategy"></a>Branching Strategy</h2><p>The GitOps approach to managing our environments brought some significant benefits, but it also made it more challenging to test changes to our charts. For example, some application changes would require add or dropping startup parameters in the pod definition. We had to be especially careful that it wouldn’t break an environment if the new chart was applied before the application version was updated. It was possible to deal with simple changes like this using conditional blocks in the Helm templates, but it got a lot more messy when we were updating community charts for our logging or monitoring infrastructure, or changing the shared ingress definitions.</p><p>To ensure we didn’t have any accidents we moved to a branching strategy. We now use three branches:</p><ul><li>develop - for our development environment. This is where most of our chart changes occur. It’s also where we test daily builds of our applications</li><li>staging - for our staging environment. We use this to test new charts and applications before a production release</li><li>production - for all of our production environments</li></ul><p>Changes to the charts get tested in the development environment. They then get merged to the staging branch just before a major release. As part of the production release cycle we merge the same changes from the staging branch to the production branch, making sure that only tested changes get deployed.</p><p>To ensure there is no configuration drift, we also occasionally merge changes from the staging and production branches back to the development branch.</p><p>We did find branching a bit difficult to use, especially for parts of our team that had less experience with Git. Even with this difficulty, we found the added safety worthwhile.</p><h2 id="The-Good-Our-Upgrade-Process"><a href="#The-Good-Our-Upgrade-Process" class="headerlink" title="The Good: Our Upgrade Process"></a>The Good: Our Upgrade Process</h2><p>Our upgrade run list was beautifully simple:</p><ol><li>Make sure the environment is healthy and all the Application resources are in a healthy state</li><li>Merge any changes from the previous branch to the target branch (ex: develop to staging, or staging to production).</li><li>For each installation, modify the version (docker image tag) in the appropriate configuration yaml files and merge those.</li><li>Find the applications marked as out of sync in ArgoCD and trigger synchronization cycles. Wait for them to finish.</li></ol><p>Once we started the synchronization cycle, ArgoCD would start applying the changes. A few minutes later the new version would start up and the web services would start responding to requests again.</p><h2 id="The-Bad-Scaling-Pods-Without-Downtime"><a href="#The-Bad-Scaling-Pods-Without-Downtime" class="headerlink" title="The Bad: Scaling Pods Without Downtime"></a>The Bad: Scaling Pods Without Downtime</h2><p>The biggest drawback of this approach was the inability to make minor configuration tweaks to our production system through the code. ArgoCD uses a synchronization cycle to apply changes from the source. This was great when we were changing the version of the application and the schema migrator needed to run, but it wasn’t so great when we needed to add a little memory or increase the replica count to keep everything working smoothly.</p><p>In these cases we had to make changes to the Kubernetes resources directly, bypassing ArgoCD. This meant the Application resources would be marked as out of sync until we made the same changes in the code. If we forgot this step, the changes would get stomped during the next synchronization cycle.</p><p>ArgoCD has a feature to ignore certain state differences in a resource. This is great when you’re using autoscaling or other Kubernetes automation features. We couldn’t use it though because it also sometimes prevented ArgoCD from applying the changes to raise the replica count from 0 in the <code>Sync</code> phase.</p><p>This is only an issue when deploying applications that need downtime while the chart is being applied. Many applications that are designed to run it Kubernetes will keep working throughout this process, and ArgoCD can handle this just fine.</p><h2 id="The-Ugly-Automatic-Synchronization"><a href="#The-Ugly-Automatic-Synchronization" class="headerlink" title="The Ugly: Automatic Synchronization"></a>The Ugly: Automatic Synchronization</h2><p>ArgoCD is capable of triggering synchronization cycles automatically when it detects changes. This is helpful if you want to ensure your cluster’s state is always identical to your committed code, which is the ultimate in a GitOps workflow. The drawback is that it also means a synchronization cycle can be triggered whenever changes are detected. Since our process involves downtime, we didn’t want this to happen unintentionally in our production environments.</p><p>The other problem we ran into with automatic synchronization was that it made it harder to test minor configuration changes in our development environment. If we added or removed a bit of memory to measure the impact, ArgoCD would quickly reset it back. We could add parameters to allow these things to be configured, but that increased the complexity of the charts and made them harder to read. It also meant we had to remember te remove the same changes again later.</p><p>The setting for automatic synchronization is specified on a per-application basis via the resource definition, so you can make this behavior optional for some of your applications. We decided to use manual synchronization in our staging and production environments for everything but the top-level charts. This allowed us to control when changes were applied.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Using ArgoCD for automating the more complicated upgrade process worked well for us, even with its challenges. I would recommend this solution to others.</p><p>Another strong reason to use ArgoCD is that it is an excellent tool to use even if you don’t need to control the synchronization process. It was a great platform for us to deploy newer Kubernetes-native applications, and it was convenient to use the same tool for everything. It also left us in a position where we could iterate gradually to a simpler deployment process with our legacy applications.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently worked on a project to move a complicated legacy application onto Kubernetes. It was quite an undertaking, but in the end we w
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://jessemcdowell.ca/tags/kubernetes/"/>
    
      <category term="devops" scheme="https://jessemcdowell.ca/tags/devops/"/>
    
      <category term="argocd" scheme="https://jessemcdowell.ca/tags/argocd/"/>
    
  </entry>
  
  <entry>
    <title>Importance of Alignment</title>
    <link href="https://jessemcdowell.ca/2023/06/Importance-of-Alignment/"/>
    <id>https://jessemcdowell.ca/2023/06/Importance-of-Alignment/</id>
    <published>2023-06-12T20:56:44.000Z</published>
    <updated>2023-06-12T20:56:44.409Z</updated>
    
    <content type="html"><![CDATA[<p>Unless you work entirely alone, alignment is a big deal. When you are well aligned with your company’s goals you are a more valuable employee. When you are well aligned with your manager they can keep you on the right track and be an ally against obstacles. When you are well aligned with your peers you can keep each other focused on the most important work.</p><p>On the other hand, when you have poor alignment you can see all sorts of problems. When teams are misaligned they can undermine each other’s efforts. When you are misaligned with your manager you can find yourself being over managed or left out to dry when things get rough. When you are not aligned with the goals of your organization you miss opportunities to demonstrate your skills and advance your career.</p><p>Alignment is such an important part of being successful in an organization that it’s important to understand what it looks like and regularly assess how healthy it is. If it starts to degrade, you should work to fix it, or you will find it gets harder and harder to be successful.</p><p>Ensuring good alignment with your manager is the most important. A good manager should help you find work that is rewarding, encourages development, and furthers the company’s goals. This is a hard job, and even the best manager in the world can’t do this if they don’t know what you enjoy and what your goals are. Make sure you are talking regularly with your manager and you have a good relationship. I can’t overstate how important it is to have a manager you trust that is helping you grow.</p><p>A manager that is honest with you when you’re doing poorly is also important. It’s impossible to grow without pushing yourself, and when you tackle new challenges it’s almost certain that you will make mistakes. If you don’t get negative feedback when you need it you can end up wasting a lot of time and energy, and ultimately damage your reputation.</p><p>In Vancouver &#x2F; Canadian culture a lot of managers (myself included) find it difficult to deliver negative feedback, but the alternative is so much worse. A manager that doesn’t communicate honestly and candidly may seem like they are supporting you and agree with your direction. This is like wearing a fake seat belt; when things go bad you will have no protection.</p><p>If you have a manager that can’t give you guidance because they don’t understand what you’re doing, you need to make sure they at least agree with the choices you are making. Be very careful here though, as some managers will say they agree with you without really meaning it, especially when the choices are complicated. You have to have make sure they really understand what you are asking and the implications of it. If they aren’t invested in the decisions, they may not back them up when you need it.</p><p>Another challenging situation is when your manager is too far removed from your work to have an opinion about it. In these cases you have to depend on the other kinds of alignment and do your best to manage and sell yourself. This becomes more likely the higher up you go in an organization.</p><p>Good alignment with your organization’s goals is also important, but this is impossible without a culture that supports it. People at all levels of an organization have to make decisions every day, communicate with customers and partners, and are constantly representing the brand. You and everyone else should know what the organization is trying to achieve and how you are personally contributing to it. When everyone isn’t working in the same direction it is easier to have miscommunications and disputes between teams.</p><p>The best teams I’ve worked on update everyone with recurring company or department-level meetings. Even if some of the information isn’t immediately or personally relevant, it all still soaks into the subconscious. Even just the exercise of gathering and presenting to the broader audience is valuable; it forces team leaders to understand the value they provide and makes sure they are measuring and delivering it.</p><p>Some companies don’t see the value of keeping everyone informed. If that’s the case where you work, you will have to take matters into your own hands. At the very least, make sure you read the company emails. Ask questions when you can, and try to always understand the direction your company is going.</p><p>Even when you have good alignment with your manager and a clear understanding of the organization’s goals, you may sometimes find yourself under a manager that isn’t well aligned themselves. Even if you are a perfect employee, the success of your team will reflect on you, and the team won’t be seen as successful if it isn’t helping the organization. The teams that are doing the best from this point of view tend to have the best bonuses and the best growth opportunities.</p><p>It’s not always possible to control the team you work on, sometimes the only way to improve things is to leave your company entirely. Of course there are lots of factors that go into a decision like that… but if you don’t feel that you, your team, and your company are going in the same direction, or if you can’t tell, you should at least be aware that it could be hurting your opportunities to grow and advance.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Unless you work entirely alone, alignment is a big deal. When you are well aligned with your company’s goals you are a more valuable empl
      
    
    </summary>
    
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
      <category term="people management" scheme="https://jessemcdowell.ca/tags/people-management/"/>
    
  </entry>
  
  <entry>
    <title>Polyglot Unconference 2023</title>
    <link href="https://jessemcdowell.ca/2023/05/Polyglot-Unconference-2023/"/>
    <id>https://jessemcdowell.ca/2023/05/Polyglot-Unconference-2023/</id>
    <published>2023-06-01T05:22:23.000Z</published>
    <updated>2023-06-01T05:22:23.580Z</updated>
    
    <content type="html"><![CDATA[<p>I recently had the pleasure of attending the 2023 Polyglot Unconference in Vancouver, put on by the <a href="https://www.polyglotsoftware.com/">Polyglot Software Association</a>. I’ve been attending these for years. It is my favourite local conference.</p><p>An <a href="https://en.wikipedia.org/wiki/Unconference">unconference</a>, sometimes called an open spaces conference, is a participant-driven event where attendees choose the topics of discussion and provide the content themselves. They are meant to be open and inviting, and build interpersonal relationships. This year was no exception.</p><p>The event started with a brief introduction and some ground rules, and then attendees began pitching sessions. Anyone could pitch a session, and then organize it however they wanted. This year I pitched a session about how to start a software company. I got on stage, gave my name, and explained what I wanted to talk about.</p><p>After all the sessions were pitched, attendees voted on the sessions they want to attend. Organizers then assigned them to rooms. All the sessions can usually be accommodated, so the voting is only used to make sure that the number of interested attendees can fit in the rooms they are assigned to.</p><p>For my session, I used a <a href="https://en.wikipedia.org/wiki/Fishbowl_(conversation)">fishbowl format</a>. I put 5 chairs on the stage. Only people in chairs could ask or answer questions, but anyone in the audience could take a chair at any time. The group on the stage had to ensure that one chair was always empty. What you end up with is an intimated discussion with an audience.</p><p>A few experienced founders attended my session, and quite a few people who wanted to or had already started software companies were present too. I asked my questions, other people asked their questions, and we got a lot of great answers. I took 3 pages of notes that will absolutely be helpful in my endeavors.</p><p>The best part of this event is learning about what other companies in town are doing, what’s working for them, and where they’ve had problems. Traditional software conferences tend to have more vendor-sponsored presentations where everything is a sales pitch. These are valuable too, but the unconference is a better way to get a balanced opinion.</p><p>I can’t wait to attend again next year.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently had the pleasure of attending the 2023 Polyglot Unconference in Vancouver, put on by the &lt;a href=&quot;https://www.polyglotsoftware
      
    
    </summary>
    
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
      <category term="learning" scheme="https://jessemcdowell.ca/tags/learning/"/>
    
      <category term="community" scheme="https://jessemcdowell.ca/tags/community/"/>
    
  </entry>
  
  <entry>
    <title>Sustainable Errors</title>
    <link href="https://jessemcdowell.ca/2023/05/Sustainable-Errors/"/>
    <id>https://jessemcdowell.ca/2023/05/Sustainable-Errors/</id>
    <published>2023-05-29T16:57:05.000Z</published>
    <updated>2023-05-30T22:36:17.219Z</updated>
    
    <content type="html"><![CDATA[<p>Making a program work for the happy path is not always easy, but given enough time I believe pretty much anyone could do it. When a professional takes on the task however they will make it work for more than just the happy path, and do it with code that is easy to debug, and easy for others to understand and change. Since so much of what we end up dealing with are exceptional flows, we need a concise way to deal with them. Fortunately we have the aptly named exception pattern.</p><p>When the pattern is used well it is almost invisible, and yet we should be thinking about it all the time. Sample code and simple apps often show exception handling as rote boilerplate that writes out stack traces and swallows errors. This is not a good example to be setting.</p><p>Most modern languages have an exception type and a throw statement. I’ll be using C#&#x2F;.Net terminology for this post, but the same or similar terms and patterns exist in Java, JavaScript, TypeScript, Python, and many other languages.</p><p>Most scripting languages (shell script, Windows batch, and sometimes PowerShell) and some low level languages like C don’t have exceptions. In these cases you have to check return codes every time you call a function or an external application, and it sucks. You don’t have to look far to find scripts filled primarily with error handling code. For the rest of us, there is something much easier and better.</p><h2 id="The-Exception-Pattern"><a href="#The-Exception-Pattern" class="headerlink" title="The Exception Pattern"></a>The Exception Pattern</h2><p>Here is an example of the exception pattern being used well:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetMagicString</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;magic.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> magicString = reader.ReadLine();</span><br><span class="line">    <span class="keyword">if</span> (String.IsNullOrEmpty(magicString))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;magic.txt did not contain any text&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> magicString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you don’t already know how exceptions work you can read about them in <a href="https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/">Microsoft’s documentation</a>.</p><p>You may have noticed that no exceptions are being handled in the function, which is the point. This depends on the built-in exception that will be thrown being good enough. This is because I expect the file to be created by the installer in normal deployments. I could wrap this in a try&#x2F;catch block and do something, but what would I do? If you were about to say “return null” then you lose 10 points. You should always favour exposing problems quickly and clearly rather than ignoring them or pushing them down the line.</p><p>If I couldn’t expect the file to exist, if say <code>magic.txt</code> was a special override file that was only created in certain circumstances, I would write the function like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetMagicString</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;magic.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> magicString = reader.ReadLine();</span><br><span class="line">        <span class="keyword">if</span> (String.IsNullOrEmpty(magicString))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;magic.txt did not contain any text&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> magicString;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (FileNotFoundException)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DefaultMagicString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that I am only catching the specific file not found exception. I could have caught any exception, but that has its own dangers. Another possible exception is the <code>UnauthorizedAccessException</code>. If that happens, I’d rather notify the user than silently ignore the file.</p><p>I added a bit of guard code that can throw the <code>InvalidOperationException</code>. Even if it’s an unlikely problem, I prefer to surface problems like this earlier. They typically save time later when debugging. I’m keeping this code in the second example even while I have access to a default value because I think an empty file is more likely a mistake than intentional. It could be intentional for some use case I don’t know about, but it is always easier to ease restrictions than it is to add new ones in a deployed application, so I’d rather be more strict early.</p><p>The <code>using var</code> declaration is a relatively new C# feature that generates an implicit using block. It causes <code>reader</code> to be disposed before the function exits, be it successfully or a because of a thrown exception. Because the stream is opening and potentially locking a file, we want to make sure it is cleaned up quickly. Cleaning up resources in all cases is something we should always be mindful of as well, but in most modern languages you can use features like <code>using</code> to make this task similarly invisible.</p><h2 id="Global-Error-Handling"><a href="#Global-Error-Handling" class="headerlink" title="Global Error Handling"></a>Global Error Handling</h2><p>So where do exceptions get handled? Generally you should have an error handler somewhere, as high up the stack as is reasonable. You only have to write it once in one place, and reducing repetition has a lot of advantages. Your error handler can do any fancy stuff you want it to, and you can change the behavior of your error handling without making sweeping changes across your application.</p><p>Most of our applications are iterating on some atomic unit of work. Web servers iterate over web requests. Background processors iterate over messages in a queue or scheduled tasks. It makes sense to implement error handlers at the level where these are invoked, especially if there is a good chance that another similar unit of work could succeed.</p><p>In a web api the error handler can usually be added as a wrapper around every request through some hook in the framework. Common implementations will log the exception and return a 500-level status code. Fancier implementations will return more nuanced codes depending on the type of the exception (like return a <code>400</code> for <code>ArgumentException</code> or anything derived from it). Your web framework of choice probably already does this for you.</p><p>Some errors, however, aren’t recoverable. For example, without complicated retry logic, many applications will be in a bad state if their startup logic fails somehow. You might have one global handler for all your startup code, but its behavior should probably be to output some useful diagnostic information and exit. There may be other errors that indicate poor application health beyond startup, but this is often pretty challenging to deal with reliably.</p><p>.Net also has a few special exceptions that can’t be caught normally. Most exceptions mean that the operation you attempted failed, but these uncatchables indicate that the runtime environment could now be in a bad state. The dreaded <code>StackOverflowException</code> is an example of this. In these cases exiting and getting restarted is the only safe thing to do. The framework is going to do that regardless of your error handling so you don’t need to add special logic for it.</p><h2 id="Throwing-Good-Exceptions"><a href="#Throwing-Good-Exceptions" class="headerlink" title="Throwing Good Exceptions"></a>Throwing Good Exceptions</h2><p>The best thing to do when you detect unexpected conditions is often throwing an exception. The exception message should clearly describe what the problem is. Remember that you or one of your peers will be reading this message about 6 months from now when a test fails or a bug gets reported. Sometimes I like to include advice about fixing the problem in the exception, but use this sparingly; it’s much less helpful when the advice has become outdated and sends users on wild goose chases.</p><p>It sometimes makes sense to create a new exception type for your error cases. I can’t remember where I once read that exceptions should have the same level of abstraction as the interface that throws them… It’s not terrible advice, but I don’t think it’s worth the trouble for most cases. If you’re building a framework it might make sense. If you’re checking for an empty file after reading its contents it may not.</p><p>One case where I do create custom exceptions is when I’m writing a unit test. For really trivial stuff (like argument null) you probably don’t need a unit test, but for anything that should be tested, use a custom exception. If you’re asserting on any exception being thrown your test could be marked as passing when it should be failing. If you derive your custom exception from a built-in or another more common exception, your callers won’t normally need to handle your specific type, but they could if they wanted to.</p><p>If you are not creating your own type, try to use a specific and appropriate exception type, either built-in or custom. <code>InvalidOperationException</code> and <code>ArgumentException</code> give better hints the developer in the future than a simple <code>Exception</code>.</p><p>It’s also a good practice to include the inner exception whenever you generate a new exception in response to a failure lower in the stack. These details can be very helpful if the new exception is ever thrown unexpectedly.</p><h2 id="What-About-Performance"><a href="#What-About-Performance" class="headerlink" title="What About Performance?"></a>What About Performance?</h2><p>One common argument against throwing exceptions is that it causes a performance hit. It’s true, it does takes time to capture the stack trace, and allocating a new object on the heap isn’t free. It depends on your circumstance of course, but I think in 99% of scenarios this cost is too miniscule to matter, and certainly far cheaper than the wasted time of developers who can’t find bugs.</p><p>If your exceptional case is something you expect to hit often inside a tight loop though, it may actually matter. The <code>TryFunction</code> pattern is the common alternative in .Net. The drawback is that because your return value is typically boolean you can’t easily add new failure cases as safely as you can with exceptions. You could include more information in another output parameter, but that can also impact your callers whenever the list changes. It also means every caller needs to check the function response, or even worse, they can forget to and the app can continue running in a weird state without realizing the call failed.</p><h2 id="What-About-Leaking-Security-Sensitive-Information"><a href="#What-About-Leaking-Security-Sensitive-Information" class="headerlink" title="What About Leaking Security Sensitive Information?"></a>What About Leaking Security Sensitive Information?</h2><p>Another argument I’ve heard against good error handling is to prevent leaking information to attackers, but I think this is mostly bad advice too. For any software that is distributed, a malicious user can easily find tools to look inside and see how it’s wired. For server-side code you should at least share the error details with yourself in your own log files. If you need to withhold information from potential hackers then do that in your global error handler.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Making a program work for the happy path is not always easy, but given enough time I believe pretty much anyone could do it. When a profe
      
    
    </summary>
    
    
      <category term="design" scheme="https://jessemcdowell.ca/tags/design/"/>
    
      <category term=".net" scheme="https://jessemcdowell.ca/tags/net/"/>
    
      <category term="c#" scheme="https://jessemcdowell.ca/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Is the Bug Fun?</title>
    <link href="https://jessemcdowell.ca/2023/05/Is-the-Bug-Fun/"/>
    <id>https://jessemcdowell.ca/2023/05/Is-the-Bug-Fun/</id>
    <published>2023-05-15T17:47:52.000Z</published>
    <updated>2023-05-15T17:47:52.291Z</updated>
    
    <content type="html"><![CDATA[<p>There are many things about producing video games that are surprising, but one of the weirdest has to be the approach to bugs. Like any piece of software, bugs are found through testing or user reports, triaged, then assigned to developers. Unlike normal business software they also ask the question, “is the bug fun?”</p><p>There are plenty of unintended features (bugs) in games that became beloved. Attack combos were an accident in Street Fighter II, but they became so popular that they are a part of basically every fighting game now. Rocket jumps are another example. The internet is full of examples.</p><p>Sometimes very glitchy games can be fun too, especially for a certain audience. Speed runners sometimes use glitches to lower their times. People love games for all sorts of reasons beyond just beating them and getting high scores. At the end of the day the goal of a game is to entertain more than be correct.</p><p>The next time a bug comes across your desk, maybe ask yourself if fixing it would make your app less fun.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are many things about producing video games that are surprising, but one of the weirdest has to be the approach to bugs. Like any p
      
    
    </summary>
    
    
      <category term="bugs" scheme="https://jessemcdowell.ca/tags/bugs/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
      <category term="video games" scheme="https://jessemcdowell.ca/tags/video-games/"/>
    
  </entry>
  
  <entry>
    <title>Case of the Disappearing Users</title>
    <link href="https://jessemcdowell.ca/2023/05/Case-of-the-Disappearing-Users/"/>
    <id>https://jessemcdowell.ca/2023/05/Case-of-the-Disappearing-Users/</id>
    <published>2023-05-01T15:26:25.000Z</published>
    <updated>2023-05-01T15:26:25.859Z</updated>
    
    <content type="html"><![CDATA[<p>Many years ago I worked on a program that had a serious problem: the users in one customer’s system were getting deleted periodically. When a user was deleted, any data linked with them was also deleted. We could restore the data from backups, but it was a difficult process, and having a system that loses data wasn’t great for our reputation, so we wanted to resolve it quickly. Our VP of development tried to find the issue first, but after a day without any progress he assigned the issue to me.</p><p>I asked some questions and tried my usual tricks. There wasn’t an error message or anything helpful in the logs. There didn’t seem to be any obvious place to start, so I did something crazy: I searched the entire codebase for the world <code>DELETE</code>.</p><p>It seemed likely to me that the user was getting deleted by the application, so there had to be a delete statement somewhere that was the cause.</p><p>One of the biases I’ve noticed in myself is that I tend to drastically over-estimate the time it will take to perform mundane tasks. In reality, even if there were a few thousand delete statements in the code (and there weren’t), it would still be possible to review them all in an afternoon. Using a good IDE that has a preview for search results and a bit of care with search terms it was possible to get through them even faster.</p><p>I found the offending delete statement. The bug was actually a feature!</p><p>The customer had re-installed the software at some point and couldn’t find their licence key. The software wouldn’t work without a licence unless it was put into “demonstration mode.” Demonstration mode caused users to be deleted after the trial period ended.</p><p>We issued them a new licence key and changed the demonstration mode feature so it wouldn’t be so destructive if it ever got turned on in the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many years ago I worked on a program that had a serious problem: the users in one customer’s system were getting deleted periodically. Wh
      
    
    </summary>
    
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
      <category term="war stories" scheme="https://jessemcdowell.ca/tags/war-stories/"/>
    
  </entry>
  
  <entry>
    <title>How to Fix a Bug</title>
    <link href="https://jessemcdowell.ca/2023/04/How-to-Fix-a-Bug/"/>
    <id>https://jessemcdowell.ca/2023/04/How-to-Fix-a-Bug/</id>
    <published>2023-04-24T15:50:00.000Z</published>
    <updated>2023-05-30T22:37:39.167Z</updated>
    
    <content type="html"><![CDATA[<p>Building applications can be tricky, and it’s inevitable that mistakes will be made. As a result, we programmers spend a lot of time fixing bugs. Sometimes they are easy, but sometimes they can be pretty tough to figure out.</p><p>I’ve fixed a lot of bugs in my career, and to be honest with you, I usually enjoy the process. These days I am typically assigned the super urgent bugs that nobody else can figure out, and I kind of like it that way. I don’t get me wrong, I don’t like the bugs being there, but I enjoy being helpful and figuring out tough problems. I also think my successes have helped improve my reputation which is always a good thing.</p><p>This can take a lot of hard work, but I’ve made the job considerably easier through a set of tricks and a process I’ve developed over my career. I never thought of these as particularly special, or as a secret weapon, but I realize now that they aren’t really taught. They are important though, so I wrote them down.</p><p>This is the process I generally follow when I’m approaching a bug. I will obviously not go through a formal process for the super simple and obvious ones, but for the toughest nuts, all the steps here will help me get it over the finish line.</p><h2 id="Step-1-Read-the-Bug-Report"><a href="#Step-1-Read-the-Bug-Report" class="headerlink" title="Step 1: Read the Bug Report"></a>Step 1: Read the Bug Report</h2><p>When a bug report comes across my desk, I read it and make sure that I understand it. Fixing a bug properly takes time and carries its own risks, so I want to be sure I’m fixing the right bug.</p><p>If I can’t understand the bug report, this is also a good place to stop and request more information. I wrote <a href="/2023/03/How-to-Report-a-Bug/">another post about writing good bug reports</a>.</p><h2 id="Step-2-Reproduce-the-Problem"><a href="#Step-2-Reproduce-the-Problem" class="headerlink" title="Step 2: Reproduce the Problem"></a>Step 2: Reproduce the Problem</h2><p>The most important step to fixing a bug is reproducing it. Even if the problem seems obvious, even if I am feeling particularly lazy, I force myself to do it anyway. If I can’t, I have no way to test my fix later. It also means I won’t be able to use a debugger to figure out what is happening when it fails.</p><p>Sometimes it’s possible to write an automated test before finding the problem, and if I can, I will. It makes debugging and testing considerably faster. In complicated software this can even be faster than starting up all the required pieces to test an issue manually.</p><p>It can be difficult to reproduce an intermittent issue, but I still put in the effort for the same reasons. I’ve sometimes had luck wrapping unit tests in a for loop, but it won’t help if the causes are environmental.</p><p>There have been rare occasions when I’ve had to attempt fixing a bug before I can reproduce it, but I will only let this happen in extreme circumstances. When doing this kind of thing I also make sure to communicate it clearly with everyone involved.</p><h2 id="Step-3-Find-the-Problem"><a href="#Step-3-Find-the-Problem" class="headerlink" title="Step 3: Find the Problem"></a>Step 3: Find the Problem</h2><p>This can be the most infuriating part of fixing bugs, but it is essential. There are a bunch of techniques that can work here. For this post I’ll stick to the tricks I use the most.</p><p>The first thing I do is read the error details again. If there is an error message in the bug report it can carry a lot of clues. It’s tempting to skim over it, and I have made this mistake plenty of times myself. Now I make sure I not only read the error message, but also understand it. This has saved me a lot of time. System errors can be especially helpful since they tend to be specific. Stack traces are also incredibly valuable. If I don’t understand what an error code means I look it up.</p><p>In the absence of a stack trace, I like to narrow down where the problem is occurring. I start by visualizing all the steps through the system that are involved in the malfunctioning operation, then I choose some point in the middle. Using my trusty debugger, I test if it’s failed at that point. I continue along in a binary search pattern until I have narrowed down the problem to a specific spot.</p><p>For example: if I’m fixing a bug in a web application where a user’s name is getting saved incorrectly I can start by checking the web request from my browser’s developer tool. If the request is wrong, I know the bug is on the client side. If the request is correct, the bug will be somewhere in the server. Assuming it’s in the server, I might set a breakpoint between my business layer and repository layer to narrow it down further. Continuing in this way I can find the exact location of the bug quickly and reliably.</p><p>It works for more than just software problems too. I’ve used the same approach to diagnose load balancer problems, problems with components in Kubernetes, computer hardware, even electrical wiring.</p><p>In some cases it’s easier to figure out what change introduced the bug instead. I will use the same kind of binary search pattern but checking out commits between releases. A quick build time and a unit test makes this a lot less painful. I’ve never had a bug where it was a good fit, but you can also try the <code>git bisect</code> command to automate the process fully.</p><p>If I ever get stuck in my investigation, I go back to the beginning and re-check all my assumptions. Did I read the bug right? Was the process in a healthy state when it occurred? Am I looking at the right version of the code? Did the feature ever work? Did I misclassify a success or failure when I did the binary search? Even if all my assumptions were correct, going through the problem again can sometimes spark new theories for investigation. This is also where I start when someone else asks me for help with their bugs.</p><p>If all else fails, or even if it hasn’t, searching on the internet can help. This is especially true for third party components or services. Be careful though, I am finding internet resources to be increasingly less helpful but your results may vary. Even though I’ve wasted a lot of time following red herrings from random internet threads, this is still sometimes the best option available.</p><h2 id="Step-4-Test-My-Theory"><a href="#Step-4-Test-My-Theory" class="headerlink" title="Step 4: Test My Theory"></a>Step 4: Test My Theory</h2><p>I find it easy to jump to conclusions when I’m debugging, but my experience has taught me to approach bugs with a scientific kind of skepticism. Once I am pretty sure I know what the problem is, if it’s not a trivial change, I like to isolate it and prove to myself that I understand it.</p><p>I will write an automated test that reproduces the problem if at all possible. It might seem quicker to fix the bug first, but starting with the test will make the process simpler. Writing a failing test proves that you understand the bug, and it also proves that the test will fail if you don’t successfully fix it.</p><p>If you can’t write a test because that isn’t your team’s practice then you have my sympathies. On the bright side, you’ll be getting a lot more experience fixing bugs!</p><h2 id="Step-5-Fix-the-Problem"><a href="#Step-5-Fix-the-Problem" class="headerlink" title="Step 5: Fix the Problem"></a>Step 5: Fix the Problem</h2><p>I will remove some bad code and &#x2F; or put some more good code in.</p><h2 id="Step-6-Look-for-Similar-Bugs"><a href="#Step-6-Look-for-Similar-Bugs" class="headerlink" title="Step 6: Look for Similar Bugs"></a>Step 6: Look for Similar Bugs</h2><p>Sometimes a bug indicates a pattern of bugs. Before I fling my fix back out into the world I like to do a little research to see if the same mistake has been made in other places.</p><p>For example: if I was fixing a bug caused by a query operator that isn’t supported by an older database server version, I can do a quick search to see if the operator was used anywhere else. Since I’ve already figured out how to fix it, I can fix them all at the same time and eliminate a whole bunch of bugs.</p><h2 id="Step-7-Test-My-Fix"><a href="#Step-7-Test-My-Fix" class="headerlink" title="Step 7: Test My Fix"></a>Step 7: Test My Fix</h2><p>Since I almost always have automated tests, I can check if I’ve fixed the problem pretty easily.</p><p>I’ll usually do a manual test as well to make sure I really have fixed the issue. Sometimes a bug has more than one cause, or is repeated in more than one place. To be honest, I often find this step tedious, so I have to remind myself why it’s important. A lot of time can get wasted if there was some aspect I missed. Also, if I’m going to put my name on a fix, I want people to be able to depend on it actually being fixed.</p><h2 id="Step-8-Understand-the-Bug’s-Impact"><a href="#Step-8-Understand-the-Bug’s-Impact" class="headerlink" title="Step 8: Understand the Bug’s Impact"></a>Step 8: Understand the Bug’s Impact</h2><p>It depends on the bug, but if there is some damage left behind, I make sure to consider its impact. Sometimes this takes a bit of experimentation, but it is important. Sometimes a cleanup script is necessary, or sometimes manual steps can be provided to correct the issue. At the very least I want to make sure I can tell my stakeholders what the impact was.</p><h2 id="Step-9-Bug-Retrospective-Post-mortem"><a href="#Step-9-Bug-Retrospective-Post-mortem" class="headerlink" title="Step 9: Bug Retrospective (Post-mortem)"></a>Step 9: Bug Retrospective (Post-mortem)</h2><p>Once in a while I take a bit of time to reflect on the bugs I’ve encountered. How did the bug escape in the first place? Is it likely that similar bugs will be introduced again? Can I introduce tools or change processes to make this class of bug less likely to occur?</p><p>Some organizations have a formal post mortem process for impactful issues. This is a great way to ensure a team is learning from its mistakes. I have introduced this process in a few of my teams and highly recommend it.</p><p>Even for bugs with less impact it can be worth spending a bit of time thinking about this. It’s not always feasible to prevent some types of bugs, but as craftspeople we should be trying!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Building applications can be tricky, and it’s inevitable that mistakes will be made. As a result, we programmers spend a lot of time fixi
      
    
    </summary>
    
    
      <category term="bugs" scheme="https://jessemcdowell.ca/tags/bugs/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
  </entry>
  
  <entry>
    <title>How to Report a Bug</title>
    <link href="https://jessemcdowell.ca/2023/03/How-to-Report-a-Bug/"/>
    <id>https://jessemcdowell.ca/2023/03/How-to-Report-a-Bug/</id>
    <published>2023-03-11T05:40:00.000Z</published>
    <updated>2023-03-12T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nobody likes bugs, least of all programmers. No matter how hard we try to catch them early, some will always escape into circulation. Until computers are smart enough to do what we meant instead of what we said, users are going to keep finding bugs, and we’re going to keep fixing them.</p><p>Before a bug is fixed, it needs to be reported. Unfortunately it’s not uncommon to receive incomplete reports. We can spend a lot of time hunting and making guesses, and sometimes that’s enough, but if we can’t figure out the problem it’s pretty hard to fix it. This can be especially unfortunate when the stakes are high, and oddly, this is when it also seems to be the most common.</p><p>So what does a bad bug report look like?</p><blockquote><p>The website crashed.</p></blockquote><p>I get this kind of report now and then, even from experienced members of our support teams. I almost always need to send it back to get more information.</p><p>If I got this report instead, I wouldn’t (usually) need more information:</p><blockquote><p>When I open the store website I get a 502 Bad Gateway error.</p></blockquote><p>When I’m trying to understand a bug, I need to know four things:</p><ul><li>How did you encounter the bug? (Steps to Reproduce)</li><li>What happened? (Actual)</li><li>What should have happened? (Expected)</li><li>Where did you encounter the bug? (Location)</li></ul><p>Here is another example of a bug that would be hard to figure out:</p><blockquote><p>I can’t delete a user.</p></blockquote><p>It only answers one of the questions (Expected). I might be able to guess what the user tried to do (Steps to Reproduce), but there could be multiple ways to do this. It doesn’t tell me what application was being used (Location) or what happened (Actual). Was there an error message? Did the application close unexpectedly? Did the computer explode in a ball of fire? I can help with most of these, but they all get approached differently.</p><p>If you want a gold star, this is a more formal way to report the same bug, and the format I typically use myself:</p><blockquote><p>Steps to Reproduce:<br>1. Go to the user list<br>2. Click a user<br>3. Click delete<br>    * Receive successfully deleted notification<br>4. Return to user list<br>Actual:<br>* User appears in the list<br>* When I click on the user again, I get the error “User not found”<br>Expected:<br>* User does not appear in the list<br>Location:<br>* Admin site: <code>https://&#123;someserver&#125;/admin/users</code></p></blockquote><h2 id="How-did-you-encounter-the-bug-Steps-to-Reproduce"><a href="#How-did-you-encounter-the-bug-Steps-to-Reproduce" class="headerlink" title="How did you encounter the bug? (Steps to Reproduce)"></a>How did you encounter the bug? (Steps to Reproduce)</h2><p>The first step to fixing a bug is trying to reproduce it. Exact steps can help a lot with this. Sometimes it isn’t enough, but it’s even more helpful when there are other factors involved.</p><h2 id="What-happened-Actual"><a href="#What-happened-Actual" class="headerlink" title="What happened? (Actual)"></a>What happened? (Actual)</h2><p>A detailed, unemotional description of what happened is the most important part of a bug report. If there in an error message, give us the exact text. It may not make sense to you, but this can tell us a lot about what is going on. If possible, copy and paste the exact text of the error. A screenshot can also be really helpful.</p><p>Expressions like “crashed” or “failed” or “doesn’t work” sound good, but they don’t tell us what happened. You don’t need to use technical words if you don’t know them, but you should avoid interpreting the information. For example “an error message appeared that said …” is much more helpful than “it failed”.</p><h2 id="What-should-have-happened-Expected"><a href="#What-should-have-happened-Expected" class="headerlink" title="What should have happened? (Expected)"></a>What should have happened? (Expected)</h2><p>Sometimes this is obvious. Generally when someone reports an error message we understand they expect not to get an error. Sometimes the expected behavior is not so obvious.</p><p>Keep in mind that programmers are trained in programming, and are usually not experts in the fields where our programs are being used. For example, if there’s a problem with the way tax is being calculated in an accounting application, the people looking at the bug may know less than you do on the subject. For technical bugs and miscalculations it can also be helpful to include how you determined the result you expected.</p><h2 id="Where-did-you-encounter-the-bug-Location"><a href="#Where-did-you-encounter-the-bug-Location" class="headerlink" title="Where did you encounter the bug? (Location)"></a>Where did you encounter the bug? (Location)</h2><p>It’s not always obvious, but sometimes companies have more than one piece of software, or more than one version in circulation.</p><p>If you’re using a website, include the URL. If it’s a visual bug, maybe include the browser you’re using, it’s version, and the operating system you’re using it on. If it’s a mobile app, include the kind of phone you have. If the app has a version number include that too.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nobody likes bugs, least of all programmers. No matter how hard we try to catch them early, some will always escape into circulation. Unt
      
    
    </summary>
    
    
      <category term="bugs" scheme="https://jessemcdowell.ca/tags/bugs/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
  </entry>
  
  <entry>
    <title>Breaking Past Senior Developer</title>
    <link href="https://jessemcdowell.ca/2021/01/breaking-past-senior-developer/"/>
    <id>https://jessemcdowell.ca/2021/01/breaking-past-senior-developer/</id>
    <published>2021-01-30T03:45:00.000Z</published>
    <updated>2021-01-30T07:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Developing software is an excellent career. Software has touched almost every aspect of our world, and its impact is always expanding. Many new things have become possible because of software, things that couldn’t have been dreamed of even ten years ago. The industry is continuing to expand. Tools are getting better. New opportunities are appearing everywhere… So why haven’t you gotten a promotion in ten years?</p><p>In the early days of my career, I got new responsibilities, promotions, and raises fairly regularly. It took a bit of luck, a lot of hard work, and a few years (but not very many years), to work my way up to a senior developer position. Senior means different things at different places, but eventually I got to a place where there was no easy next step, and I had a good number of peers in exactly the same position.</p><p>I can now proudly tell you that I have broken past the wall. About a year ago I achieved my goal and got promoted to the role of system architect. The following are the things that made the difference for me.</p><h2 id="Choose-the-career-path-you-want"><a href="#Choose-the-career-path-you-want" class="headerlink" title="Choose the career path you want"></a>Choose the career path you want</h2><p>There seems to be three distinct paths forward from senior developer:</p><ul><li>people and project management</li><li>technical leadership</li><li>focused technical expert</li></ul><p>The focused technical expert path only exists in companies that need experts focused in very specific areas such as hardware manufacturers or OS &#x2F; platform companies. If you are at the top of one of these specialties, you probably already work for the company where you’ll be getting promoted, and this post won’t really apply to you.</p><p>Both management and technical leadership are fine choices, but you should decide which is right for you. Here are some important differences to help you make your choice:</p><ul><li>Technical leadership positions are harder to get. There aren’t as many of them, and it seems they are more sought after.</li><li>Management positions will eventually strangle out all time for development. At some point you may not be able to go back.</li><li>Technical leadership positions require making harder technical choices based on research and experimentation.</li><li>Management positions require making harder business decisions based on company and customer priorities.</li></ul><p>Either way, they are both big changes from full-time development. You will be leaning heavily on your soft skills, spending more of your time in meetings and writing a lot of documents. You will typically have less control over the things you focus on, and your success will depend more heavily on the work of others.</p><p>If all this sounds awful to you, it is entirely fine to stay where you are. You can spice things up by changing projects or companies. You may want to scale up your impact some day, but until then, do what you love. The only unfortunate consequence is that you will likely be stuck in your current salary range.</p><h2 id="Develop-your-hard-skills-and-your-technical-breadth"><a href="#Develop-your-hard-skills-and-your-technical-breadth" class="headerlink" title="Develop your hard skills and your technical breadth"></a>Develop your hard skills and your technical breadth</h2><p>Both leadership and management positions will favour generalists because you’ll typically have responsibility for far more parts of your system. If you’re after a management position, a basic understanding of different problem areas will be enough. If you want to be a technical leader, make sure you have some success stories in a few areas. If you’ve only ever worked in the back end, for example, see if you can get some time working in the front of the house.</p><p>Technical leaders are going to need to be up to date on all the latest technologies and be able to discuss them intelligently. If learning and working with new things isn’t possible where you work, it may be time to consider changing companies. Contracting helped me expand my portfolio dramatically in just a few years, but it’s not a path I’d necessarily recommend to anyone.</p><h2 id="Find-the-right-company-and-manager-to-help-you-advance"><a href="#Find-the-right-company-and-manager-to-help-you-advance" class="headerlink" title="Find the right company and manager to help you advance"></a>Find the right company and manager to help you advance</h2><p>It’s always important to have a good relationship with your manager, but this is especially true if you want to advance your career. Make sure your manager knows what your goal is, and make sure they are supportive. A good manager will tell you what areas you need to improve, represent you when the right opportunity appears internally, or vouch for you if you find one outside.</p><p>Make sure your company has the role you want. Very small companies will probably not need a software architect, and may not have many openings for new managers. If you’re growing quickly it may appear in the future, but ask your manager. If you’re valued enough, they might even create the position for you when it makes sense.</p><p>If you’re in a place where advancing isn’t possible, or you aren’t getting the support you need, you may have to make the difficult choice and move on. When considering new roles, think about how they can help you work toward your goal. It’s also totally fine, maybe even advantageous, to tell a potential employer what you’re working toward, and ask if it’s possible with them.</p><h2 id="Develop-your-soft-skills"><a href="#Develop-your-soft-skills" class="headerlink" title="Develop your soft skills"></a>Develop your soft skills</h2><p>In your new role you’re going to need to juggle more priorities, build consensus with more people, and convince everyone that it’s all under control. You won’t need to be amazing at this on your first day, but you won’t get the job if they don’t think you can do it.</p><p>Here are some things to work on:</p><ul><li>Find your own personal organization system and get comfortable with it.</li><li>Study development process and team management. There are lots of great books, blogs, videos, and classes.</li><li>Give more presentations, and put effort into improving them.</li><li>If you aren’t already, see if you can become someone’s manager.</li><li>Try coaching &#x2F; mentoring someone who is struggling.</li><li>Run a study group or a book club.</li></ul><h2 id="Develop-your-personal-brand"><a href="#Develop-your-personal-brand" class="headerlink" title="Develop your personal brand"></a>Develop your personal brand</h2><p>I think a lot of us developers lack awareness of our personal brand, but it’s an important part of your career, and it’s importance increases the higher up you go. Make sure people want to work with you, and try to get some high-profile successes under your belt. These will all help you earn a promotion, and give you essential credibility once you get it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Developing software is an excellent career. Software has touched almost every aspect of our world, and its impact is always expanding. Ma
      
    
    </summary>
    
    
      <category term="leadership" scheme="https://jessemcdowell.ca/tags/leadership/"/>
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
      <category term="people management" scheme="https://jessemcdowell.ca/tags/people-management/"/>
    
  </entry>
  
  <entry>
    <title>Brewing Your Own Iced Tea</title>
    <link href="https://jessemcdowell.ca//2018/06/brewing-your-own-iced-tea/"/>
    <id>https://jessemcdowell.ca//2018/06/brewing-your-own-iced-tea/</id>
    <published>2018-06-14T04:29:59.000Z</published>
    <updated>2023-05-01T18:41:41.561Z</updated>
    
    <content type="html"><![CDATA[<p>There are few things more refreshing than a cold glass of good iced tea. I’ve tried iced tea from a lot of places, but the best I’ve had to this day is my own recipe. It’s so easy that I can’t in good conscience keep it secret. It’s also far cheaper than anything you can buy in a can or bottle, and a lot healthier because it doesn’t require any kind of sweetener. The only down side is that it takes a few hours to cool.</p><p>The short version: Make good tea with boiling water, then let it cool slowly before serving.</p><p>The long version:</p><p>Any decent black tea should work, but my favourite is loose Twinings Earl Grey (<a href="https://www.amazon.com/Twinings-Classics-Earl-Grey-Loose/dp/B0005ZXX1S/ref=sr_1_42?s=grocery&ie=UTF8&qid=1375601004&sr=1-42">Amazon.com</a>). The loose version tastes quite different than their tea bags, so do put in the effort to find it.</p><p>You will also need a fine strainer to remove the tea. I use a cloth tea sock (<a href="https://www.amazon.com/dp/B002U77176/ref=sxts_k2p-hero-vn_lp_3?pf_rd_m=ATVPDKIKX0DER&pf_rd_p=8011851592090061987&pd_rd_wg=wF4KQ&pf_rd_r=THGQ3HKM51EH9K3JW6Y2&pf_rd_s=desktop-sx-top-slot&pf_rd_t=301&pd_rd_i=B002U77176&pd_rd_w=e9sIM&pf_rd_i=tea+sock&pd_rd_r=63759cf2-6f82-4d78-840b-edb729e1d77b&ie=UTF8&qid=1527138358&sr=3">Amazon.com</a>).</p><p>Also, be careful that you brew the tea in a container that can handle boiling water. A heat-safe glass pitcher is nice, but a regular metal pot from your kitchen will do just as well. Once it’s down to room temperature, you can transfer it to any container you like.</p><p>I add 25 mL of loose tea for every 1 L of boiling water. Make sure the water is actually at a rolling boil. The hot tap on your water cooler is not going to work for this.</p><p>Set a timer for 5 minutes. At about 2 minutes, stir the tea. At 5 minutes, remove the tea strainer gently without stirring. The tea seems to produce the most flavour about two minutes in, and the most bitterness at the end of the steeping. Stirring only the once yields the smoothest flavour for me.</p><p>Let the tea cool slowly to room temperature, then put it in the fridge to cool the rest of the way. Adding ice while it’s hot can disturb the flavour, and dilutes the tea.</p><p>Once it’s cold, pour a glass, add ice if you like, and enjoy.</p><p>You can experiment with different teas. Green or white tea should work, but follow their proper brewing instructions. Only black tea should be brewed with boiling water. My second favourite mix is using a plain black orange pekoe, inserting a couple springs of fresh mint after removing the tea.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are few things more refreshing than a cold glass of good iced tea. I’ve tried iced tea from a lot of places, but the best I’ve had 
      
    
    </summary>
    
    
      <category term="food" scheme="https://jessemcdowell.ca/tags/food/"/>
    
      <category term="tea" scheme="https://jessemcdowell.ca/tags/tea/"/>
    
      <category term="recipes" scheme="https://jessemcdowell.ca/tags/recipes/"/>
    
  </entry>
  
  <entry>
    <title>Infiltrating an Organization (or: Joining a New Team)</title>
    <link href="https://jessemcdowell.ca//2016/08/infiltrating-an-organization/"/>
    <id>https://jessemcdowell.ca//2016/08/infiltrating-an-organization/</id>
    <published>2016-09-01T05:23:42.000Z</published>
    <updated>2021-01-30T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>It takes some time to integrate into a new team. I always feel like an outsider at first. As I build friendships and trust, I’m able to contribute with increasing effectiveness. Having noticed some patterns, I’ve been able to make the process faster and smoother using a few simple tricks.</p><p><a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">Tuckman’s Stages of Group Development</a> describe what happens when a team is formed. His theory has four stages: forming, storming, norming, and performing. As I stared writing this post, I noticed that the stages I was describing lined up fairly well with his. It’s important to note that I’m talking about joining an existing team, where he talks about a team being formed entirely from new people.</p><p>I will relate the stages I’ve noticed using his labels, but leave it as an exercise for the reader to compare to his more detailed descriptions.</p><h2 id="1-Forming"><a href="#1-Forming" class="headerlink" title="1) Forming"></a>1) Forming</h2><p>When I first join a team, everyone is as clueless about me as I am about them. Anything I can do to facilitate interaction here is valuable. I like to set out a couple trinkets on my desk, things that show my personality and interests. This creates openings for others to start conversations, which can help to break the ice. It can be awkward and uncomfortable as the “new guy”, but getting through this sooner really helps speed things up.</p><p>I also tend to ask a lot of questions while I’m getting my bearings. The hard part here is gathering information without judging or commenting too much. Honesty is important, but this early in the process, it can be more damaging than helpful. It’s easy to forget that things were built with constraints and assumptions I wasn’t there to experience.</p><p>That being said, looking things over with a fresh set of eyes can uncover many interesting things. So that I don’t lose track of them, I write every idea and observation down and revisit them later.</p><h2 id="2-Storming"><a href="#2-Storming" class="headerlink" title="2) Storming"></a>2) Storming</h2><p>After a month or two, I start getting used to what’s going on, and the problems the team is solving. The things that seemed strange before may now be routine, but some will still get in my way. My productivity improves, but I don’t feel like a full member of the team yet.</p><p>This is when I start going through my list of suggestions. I remove the items that no longer make sense, and then prioritize the remainder. I work through my list slowly, applying gentle pressure, trying to ask questions of various people on the team. Sometimes the questions receive insightful answers, other times they provoke good changes. Occasionally they uncover issues with team dynamics or lost political battles. All of these outcomes are valuable in different ways.</p><p>Essentially, I am trying to develop my voice. By waiting until I’ve been in the team a bit, I have a much firmer foundation to launch from. Being honest, and being able to disagree respectfully are necessary to fully contributing to the team. Just remember to take it slowly. If you come on too strong too suddenly you can alienate your coworkers.</p><p>With time, everyone gets used to me and my style. Once they realize that I can challenge opinions without judging their source, things become a lot smoother.</p><h2 id="3-Norming"><a href="#3-Norming" class="headerlink" title="3) Norming"></a>3) Norming</h2><p>After a while, I run out of questions. At this point, I will have a pretty good understanding of the architecture, the history and opinions that shaped it, and have a rough idea where people stand on the important issues. Others should have a good idea where I stand too.</p><p>This is when I start fine-tuning my personal processes, and trying to resolve anything that’s still holding me back. I expect to have a good relationship with my manager by this point. I would be bringing up more serious issues earlier, but now I want to start bringing up everything else. If our relationship strong enough, this is when I would try to fix that also.</p><p>Sometimes I never make it to this stage. I might be spending too much energy arguing, or feel like my contributions are not appreciated. If I don’t make it here within a few months, and have no clear path to improve things, I know it’s time to brush up my resume.</p><h2 id="4-Performing"><a href="#4-Performing" class="headerlink" title="4) Performing"></a>4) Performing</h2><p>With good working relationships, enough context about the problem space, and all my major issues resolved, I can now focus on getting some work done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It takes some time to integrate into a new team. I always feel like an outsider at first. As I build friendships and trust, I’m able to c
      
    
    </summary>
    
    
      <category term="leadership" scheme="https://jessemcdowell.ca/tags/leadership/"/>
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>Why I Only Drink Loose Tea</title>
    <link href="https://jessemcdowell.ca//2014/06/why-i-only-drink-loose-tea/"/>
    <id>https://jessemcdowell.ca//2014/06/why-i-only-drink-loose-tea/</id>
    <published>2014-06-01T22:47:35.000Z</published>
    <updated>2023-05-01T18:38:45.513Z</updated>
    
    <content type="html"><![CDATA[<p>When I was a child, I drank tea because my parents wouldn’t let me drink coffee. I would soak a tea bag in hot water until it made a dark, bitter liquid, then dump in milk and sugar until it was overly sweet, and mostly flavourless. I would sip it to fit in with adults, but I wouldn’t say that it was something I enjoyed.</p><p>As a young adult, I tried loose tea on the advice of a friend. It was a totally different drink. Black tea tasted rich and warming. Earl grey had a wonderfully soothing aroma. Green tea had a nourishing earthy taste that made me feel good when I drank it. More importantly, there was very little bitterness, so I could skip the milk and sugar, and enjoy the flavours even more.</p><p>The reason why loose tea tastes better is basic chemistry. Tea is damaged by exposure to air. The tea in tea bags is ground to a fine dust, then spread out into thin mesh pouches. The larger surface area accelerates the ageing process, robbing the flavour and aroma.</p><p>It may be true that tea bags are easier than loose tea, but with a little equipment they aren’t much easier. Most of the time, I use a simple strainer that sits in the cup like <a href="https://www.amazon.ca/s/field-keywords=Finum+basket">this one</a> (<a href="https://www.amazon.ca/s/field-keywords=Finum+basket">amazon.ca</a>, <a href="https://www.amazon.com/s/field-keywords=Finum+basket">amazon.com</a>). Measure some loose tea into the basket, pour boiling water over it, and remove the basket once it’s finished steeping. The lid can be flipped to hold the wet basket, so you don’t even need to stay near the sink.</p><p>At work, or when I’m travelling, I use <a href="https://www.libretea.com/">a tea thermos with a built-in strainer made by a local company</a>. I put dark teas in the strainer part, steep with the container upside down, then flip and remove both lids to drink. It’s easy to use, and it makes it easy to carry hot tea around without spilling or making a mess.</p><p>Loose teas can be harder to find, but there are many great sources online. If there is a tea store in your neighbourhood, going in and selecting a few teas can be a lot of fun. Except for the very highest grades, most good teas aren’t too expensive, especially when compared to premium tea bags.</p><p>Once awakened, I started taking a lot of pleasure in hunting down and trying new teas and brewing equipment. I have been researching and experimenting for more than a decade now, and I still feel like I’ve barely scratched the surface.</p><p>Sometimes I am forced to drink tea from tea bags while I’m in a restaurant or visiting family. Some tea bags that are better than others, but all of them seem lacking compared to my own stash at home. It’s enough that I’ll never forget why I put in the extra effort to enjoy my cup of tea.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I was a child, I drank tea because my parents wouldn’t let me drink coffee. I would soak a tea bag in hot water until it made a dark
      
    
    </summary>
    
    
      <category term="food" scheme="https://jessemcdowell.ca/tags/food/"/>
    
      <category term="tea" scheme="https://jessemcdowell.ca/tags/tea/"/>
    
  </entry>
  
  <entry>
    <title>Controller Led Navigation in Angular</title>
    <link href="https://jessemcdowell.ca//2014/04/controller-led-navigation-in-angular/"/>
    <id>https://jessemcdowell.ca//2014/04/controller-led-navigation-in-angular/</id>
    <published>2014-04-01T22:59:35.000Z</published>
    <updated>2023-05-01T19:17:58.917Z</updated>
    
    <content type="html"><![CDATA[<p>I recently tried <a href="https://angularjs.org/">AngularJS</a> for a pet project. I watched <a href="https://www.youtube.com/watch?v=i9MHigUZKEM" title="a great tutorial">a great tutorial about the platform</a>, then dove in head first. You can see what I built here: <a href="https://www.jessemcdowell.ca/mysterysolver" title="Mystery Solver">MysterySolver</a></p><p>I enjoyed Angular. It was straightforward to use, and allowed me to bang out a lot of functionality without much cumbersome boilerplate code. Jasmine, the testing framework set up in the bootstrap source, was also pretty slick. I really liked how I could nest a bunch of test blocks inside of each other to reuse common setup code.</p><p>The only serious bump I ran into was getting multiple controllers to work together.</p><p>My goal was to build a wizard-style flow. A user enters a bit of info, hits a button, then enters more info. The answers in one step affect the questions in future steps, or might cause steps to be added or taken away. I wanted the controller to trigger the navigation, and I wanted to pass state when it did.</p><p>View-led navigation would have been easy: add a link whenever you like. A user clicks and the new controller is loaded. This kind of navigation is great for keeping controllers ignorant of each other. I suspect this approach is better for search engine indexers as well. It wasn’t ideal for me.</p><p>I searched the Internet and read a bunch of documentation hoping to find an easy answer. What I found was a bunch of other people asking the same questions. When I finally decided to build it myself, the solution was easier than I expected:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var module = angular.module(&#x27;...&#x27;, []);</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">service</span>(<span class="string">&#x27;navigation&#x27;</span>, <span class="keyword">function</span>(<span class="params">$location</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> storage = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">navigate</span>: <span class="keyword">function</span>(<span class="params">path, data</span>) &#123;</span><br><span class="line">      storage = &#123;</span><br><span class="line">        <span class="attr">path</span>: path,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">      &#125;;</span><br><span class="line">      $location.<span class="title function_">path</span>(path);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">getNavigationData</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((storage == <span class="literal">null</span>) || (storage.<span class="property">path</span> != $location.<span class="title function_">path</span>())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;navigated without passing data&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> data = storage.<span class="property">data</span>;</span><br><span class="line">      storage = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>To navigate, I used code like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="title function_">controller</span>(<span class="string">&#x27;Page1Controller&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="string">&#x27;navigation&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope, navigation</span>) &#123;</span><br><span class="line">  $scope.<span class="property">navigate</span> = <span class="keyword">function</span> (<span class="params">navigationParameter</span>) &#123;</span><br><span class="line">      navigation.<span class="title function_">navigate</span>(<span class="string">&#x27;/Page2&#x27;</span>, navigationParameter);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>In the destination controller, I fetched the navigation parameter like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="title function_">controller</span>(<span class="string">&#x27;Page2Controller&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="string">&#x27;navigation&#x27;</span>, <span class="keyword">function</span> (<span class="params">$scope, navigation</span>) &#123;</span><br><span class="line">  $scope.<span class="property">navigationParameter</span> = navigation.<span class="title function_">getNavigationData</span>();</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>It was easy to test this code. Whenever I expected a controller to navigate, I checked the value of <code>$location.path()</code>. To pass navigation parameters into controllers, I just called the navigate method before the controller was created in the setup block.</p><p>Unfortunately this solution breaks the back button. Because the browser triggers backward navigation, the navigation parameter won’t be set when the controller tries to load. This wasn’t something I needed, so I left alone.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently tried &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; for a pet project. I watched &lt;a href=&quot;https://www.youtube.com/watch?v=i9M
      
    
    </summary>
    
    
      <category term="web" scheme="https://jessemcdowell.ca/tags/web/"/>
    
      <category term="angular" scheme="https://jessemcdowell.ca/tags/angular/"/>
    
      <category term="js" scheme="https://jessemcdowell.ca/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Reading Server Graphs: Connected Users</title>
    <link href="https://jessemcdowell.ca//2013/06/reading-server-graphs-connected-users/"/>
    <id>https://jessemcdowell.ca//2013/06/reading-server-graphs-connected-users/</id>
    <published>2013-06-15T05:30:44.000Z</published>
    <updated>2023-05-30T22:38:53.676Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve spent the last several years working on multi-user server systems in two different companies. Both those companies had a giant monitor hanging off a wall showing a graph of connected users. It won’t give you detailed diagnostic information, but it is a good indicator for the health of your servers, and your product generally. If you learn to notice certain patterns in your user graph, it can also save you precious time when things go wrong.</p><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><img src="/2013/06/reading-server-graphs-connected-users/NetworkDiagram.jpg" class="" title="A hand-drawn network diagram with a load balancer in front of three web nodes and a single backing database."><p>The patterns I’m describing assume a common architecture: you have some boxes in the front that have your traffic balanced between them, and some stuff behind them that’s not balanced. For the purposes of this discussion, it doesn’t matter if it’s one or more apps in the front, if you have a service tier, or what kind of data storage you use. Anything that’s redundant is going to be called distributed, and anything that’s not is going to be called central. You need some way to track user sessions, and the ability to detect disconnects within a few minutes. Some of these graphs also depend on a load balancer that’s configured to keep a single user session on the same distributed server.</p><h2 id="Healthy"><a href="#Healthy" class="headerlink" title="Healthy"></a>Healthy</h2><img src="/2013/06/reading-server-graphs-connected-users/Normal.png" class="" title="Two smooth sine waves being added to make a third smooth sine wave."><img src="/2013/06/reading-server-graphs-connected-users/NormalZoomed.png" class="" title="A zoomed in look at part of the total sine wave. The line is making a very smooth curve."><p>This is how a healthy system should look. I’m showing two views, one broken into a couple regions, and another just showing the total within a shorter time span. It’ll be a lot easier to show these patterns on the zoomed in graph, so I’ll use that as a base line for the following examples.</p><p>I was surprised when I first saw the smooth wave-like pattern a connected user graph makes. These examples are a pure sine wave because it was easy to produce, but it’s pretty close to what I’ve seen on real systems. The waves might get a little higher and wider on weekends, but it’s always a smooth line when things are normal.</p><p>The numbers and data shown are totally fabricated, and do not represent any of the systems I’ve worked on. My focus here is on the disruptions to the lines. I have observed all of the patterns I’m showing in real production environments, some of them numerous times.</p><h2 id="Central-Component-Malfunction-x2F-Failure"><a href="#Central-Component-Malfunction-x2F-Failure" class="headerlink" title="Central Component Malfunction &#x2F; Failure"></a>Central Component Malfunction &#x2F; Failure</h2><img src="/2013/06/reading-server-graphs-connected-users/CentralComponentMalfunction.png" class="" title="Line has sudden spikes up and down. The down spikes almost reach the 0 line."><p>This is the worst case for a server system, and as you can see, the results are drastic. You can tell it’s a central component because the number of connected users drops very close to zero. You’ll also note that I show the connected users shooting back above the norm. This happens when users try to reconnect once or multiple times when the system becomes unresponsive. This is a pattern you will notice during most malfunctions.</p><h2 id="Distributed-Component-Malfunction"><a href="#Distributed-Component-Malfunction" class="headerlink" title="Distributed Component Malfunction"></a>Distributed Component Malfunction</h2><img src="/2013/06/reading-server-graphs-connected-users/DistributedComponentMalfunction.png" class="" title="Line has sudden spikes up and down but they stay relatively close to the trend line."><p>This is a much more common occurrence in a server system; a server starts to malfunction without losing the ability to respond to network traffic. The load balancer doesn’t detect a failure, but users have serious trouble using the app. You will see a serious fluctuation in the graph as users start disconnecting and reconnecting, slowly getting pushed to new working servers. This is one of the reasons why it’s important to have sticky sessions on your load balancer.</p><h2 id="Distributed-Server-Failure"><a href="#Distributed-Server-Failure" class="headerlink" title="Distributed Server Failure"></a>Distributed Server Failure</h2><img src="/2013/06/reading-server-graphs-connected-users/DistributedServerFailure.png" class="" title="Line has a sudden drop down (a portion of it" alt="s load), a very small bump up, and then things return to normal."><p>When one of your distributed servers fails outright, you see a much more sudden gouge, but proportional to the number of servers you have. The graph returns to normal fairly quickly once the load balancer detects the bad server, and users finish logging back in.</p><h2 id="Application-Overloaded"><a href="#Application-Overloaded" class="headerlink" title="Application Overloaded"></a>Application Overloaded</h2><img src="/2013/06/reading-server-graphs-connected-users/ApplicationOverloaded.png" class="" title="At the peak of a curve the line goes from smooth to choppy with spikes downward from the trend line."><p>Performance limits can be distinguished because they get worse as the number of connecting users increases. This example shows a hard wall, but the severity you observe will depend on how your system is breaking down. The key indicator is the subtle twitching that gets progressively worse as the pressure builds. The deep downward spikes occur as various parts of the system start throwing large quantities of errors.</p><h2 id="Central-Component-Performance"><a href="#Central-Component-Performance" class="headerlink" title="Central Component Performance"></a>Central Component Performance</h2><img src="/2013/06/reading-server-graphs-connected-users/CentralComponentPerformance.png" class="" title="The line goes from smooth to choppy with spikes down higher than the spikes up. It is displayed off the peak of the normal curve."><p>This is what it looks like when a central component starts to have a performance issue. When it occurs off peak, it’s a good clue that some critical system is acting up. If it’s not obvious what’s wrong, here are a few things you can check: failed hard drives in your storage system, hardware errors in your system logs, unusual latency with a heavily-used APIs, or perhaps someone is running an ad-hoc query on the production database.</p><h2 id="Denial-of-Service-Attack"><a href="#Denial-of-Service-Attack" class="headerlink" title="Denial-of-Service Attack"></a>Denial-of-Service Attack</h2><img src="/2013/06/reading-server-graphs-connected-users/DosAttack.png" class="" title="The trend line suddenly drops near zero. There are a few spikes of retrying users before the line goes flat."><p>Denial of Service attacks are awful, and unfortunately effective things. They look different than network gear failures because attackers have trouble ramping up load generators quickly. Once they do get going though, your networking gear will usually start failing, and nothing will get through until they stop. Most DOS attacks are network-level, so you shouldn’t see increased activity or connections before or during the attack.</p><h2 id="Television-Ad"><a href="#Television-Ad" class="headerlink" title="Television Ad"></a>Television Ad</h2><img src="/2013/06/reading-server-graphs-connected-users/TvAd.png" class="" title="The trend line has a slight bump and then slowly trails back down to the trend line."><p>Advertising should increase your number of connected users. If your ad hits lot of people at the same time, such as a TV ad, you’ll see a bump like this. There will be a spike just as the ad airs, a bit of hang time, then it starts to trickle down to normal. The size of the bump will depend on the effectiveness and reach of your ad.</p><h2 id="Television-Event"><a href="#Television-Event" class="headerlink" title="Television Event"></a>Television Event</h2><img src="/2013/06/reading-server-graphs-connected-users/TvEvent.png" class="" title="The trend line takes a noticeable (but proportional) dip, then raises slightly above the trend line before returning to normal."><p>This is one of my favourite patterns. This is what happens if there is a big event that your audience is interested in. An example would be a sports site during the Super bowl. You see a dip while it airs, then you go back to normal when it ends. If people don’t like the event, the line might start returning to normal sooner.</p><h2 id="Monitoring-Failure"><a href="#Monitoring-Failure" class="headerlink" title="Monitoring Failure"></a>Monitoring Failure</h2><img src="/2013/06/reading-server-graphs-connected-users/MonitoringFailure.png" class="" title="The trend line falls instantly to 0 and stays there until it returns instantly to normal."><p>A flat line like this is almost never real, except maybe during deliberate maintenance windows. If it’s not obvious why you’re flat, you should check that your monitoring and graphing systems are collecting data correctly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve spent the last several years working on multi-user server systems in two different companies. Both those companies had a giant monit
      
    
    </summary>
    
    
      <category term="performance" scheme="https://jessemcdowell.ca/tags/performance/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
      <category term="devops" scheme="https://jessemcdowell.ca/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>InstallUtil and BadImageFormatException - Facepalm</title>
    <link href="https://jessemcdowell.ca//2012/04/installutil-and-badimageformatexception/"/>
    <id>https://jessemcdowell.ca//2012/04/installutil-and-badimageformatexception/</id>
    <published>2012-04-15T06:09:18.000Z</published>
    <updated>2023-05-29T17:09:30.588Z</updated>
    
    <content type="html"><![CDATA[<p>I had a frustrating issue at work this week: one that was easy to fix, but embarrassingly difficult to find. I came pretty close to giving up, which is not a solution I often explore, but in the end we figured it out and got everything working.</p><p>A member of our operations team was installing a Windows service I’d built to monitor some stuff in our production environment. I’ve made a few windows services in my day, and installed them many times on many machines. I’d even installed this one on my development machine with no issue. In our staging environment, however, this is what we got:</p><blockquote><p>C:\Install\TheService&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe TheService.exe Microsoft (R) .NET Framework Installation utility Version 4.0.30319.1 Copyright (c) Microsoft Corporation. All rights reserved.</p><p>Exception occurred while initializing the installation: System.BadImageFormatException: Could not load file or assembly ‘file:&#x2F;&#x2F;&#x2F;C:\Monitoring\Service\TheService.exe’ or one of its dependencies. An attempt was made to load a program with an incorrect format.</p></blockquote><p>We checked the likely things: the framework version, the platform the app was built for, even re-copying the files in case they somehow got corrupted. When these didn’t work, we started trying more radical things: forcing all assemblies to 32 bit, even running the service as an executable to see if there was some error in the app.</p><p>In my defence, we are both experienced engineers, and I’m not the only person who missed it. Look closely at the command line we used:</p><blockquote><p>C:\Windows\Microsoft.NET\Framework<strong>64</strong>\v4.0.30319\InstallUtil.exe</p></blockquote><p>Long version: Service applications in Visual Studio 2010 are 32 bit by default, and this is a reasonable default for them to have. We were trying to install the 32 bit service with the 64 bit version of InstallUtil. InstallUtil loads the target assembly to access it’s installation instructions, but you can’t load a 32 bit assembly from a 64 bit application (or vice versa). If you try to, you get a BadImageFormatException.</p><p>Short version: Two numbers derailed my entire afternoon.</p><p>It would have been nice if the error message from InstallUtil was a little more specific, but I suppose this isn’t a common problem. At least I got a good reminder about the importance of checking the small details when the big ones aren’t bearing fruit.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a frustrating issue at work this week: one that was easy to fix, but embarrassingly difficult to find. I came pretty close to givin
      
    
    </summary>
    
    
      <category term=".net" scheme="https://jessemcdowell.ca/tags/net/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
      <category term="devops" scheme="https://jessemcdowell.ca/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Choosing Priorities</title>
    <link href="https://jessemcdowell.ca//2012/03/choosing-priorities/"/>
    <id>https://jessemcdowell.ca//2012/03/choosing-priorities/</id>
    <published>2012-03-09T05:50:05.000Z</published>
    <updated>2021-01-30T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>During the summer I started a difficult but important journey to reorganize my life. The first step was <a href="https://www.jessemcdowell.ca/2011/10/managing-priorities-outside-of-work" title="organizing my daily tasks">organizing my daily tasks</a>. I was successful, but becoming productive again has created new issues.</p><p>When you change from trying to do everything to doing what’s most important, you need to decide what important means. Figuring this out for myself has proven difficult. I still don’t have all the answers, but I am constantly making progress.</p><p>Deciding what isn’t important has been easier. I am abandoning Themis, my attempt at an open source project. I no longer have a need for it, and it will take a lot more effort to get it finished than I originally expected. I would be delighted if someone wanted to take it on, but there isn’t enough there for it to be likely.</p><p>Writing in this blog has also been pushed down the priority list. I intend to keep going, but instead of forcing out a steady pace of content, I’ll wait until I have ideas that I have a strong desire to share.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During the summer I started a difficult but important journey to reorganize my life. The first step was &lt;a href=&quot;https://www.jessemcdowel
      
    
    </summary>
    
      <category term="projects" scheme="https://jessemcdowell.ca/categories/projects/"/>
    
      <category term="Themis" scheme="https://jessemcdowell.ca/categories/projects/Themis/"/>
    
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>Sharpening The Saw</title>
    <link href="https://jessemcdowell.ca//2011/10/sharpening-the-saw/"/>
    <id>https://jessemcdowell.ca//2011/10/sharpening-the-saw/</id>
    <published>2011-10-25T01:49:26.000Z</published>
    <updated>2021-01-30T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of the best things about working in the software business is the high rate of change. Not only do we work with machines that radically change in capability every few years, but new techniques and technologies are constantly appearing on the scene. It is a fascinating new frontier that never gets dull.</p><p>One of the worst things about working in the software business is the high rate of change. If you only focus on your job and stop paying attention, you could wake up one day unemployed with an obsolete skill set. Keeping up to date is a lot of work, and it becomes harder every year.</p><p>Some skills hold up better over time. Solid work habits are priceless, and can help you advance your career even where technical skills are lacking. Work management, software design, and coding practises are good subjects to study as well; they don’t age nearly as fast as specific technologies, and they can make a big impact on the quality of your work. Unless you become a manager however, you’re still going to need to study technical stuff.</p><p>The only way to really learn a tool is to use it, so study at home isn’t always enough. Some employers will deliberately favour new technologies to keep skills fresh and employees happy, but this is not the standard. If your company starts to lag behind industry trends, you might consider changing jobs while it’s still possible.</p><p>There are some tricks that help me stay up to date: I listen to podcasts while exercising or doing simple chores. Public transit is a great opportunity to read while commuting. A smart phone helps me squeeze in a few extra blogs and tweets when I’m waiting for something. This is primarily how I follow industry trends.</p><p>To learn specific technologies, I’ll spend an hour or two a few times a week reading or watching videos. I need to play with something to understand it, so I spend an odd evening banging away at some pet project.</p><p>My study used to be limited to an occasional book or seminar, but increasing my study time, and opening myself to podcasts, blogs, and twitter has made a huge difference in my career. I have more to contribute in design meetings. I have opinions on various technologies I haven’t even used. It takes more energy for sure, but I feel like I am a better developer for it, and I don’t regret it one bit.</p><p>This business is a challenging one, but exciting as well. If you are the kind of person that loves to learn, explore new technologies, and push yourself to constantly look at problems in new ways, then embrace the change and you will do well.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One of the best things about working in the software business is the high rate of change. Not only do we work with machines that radicall
      
    
    </summary>
    
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
      <category term="learning" scheme="https://jessemcdowell.ca/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>Managing Priorities Outside of Work</title>
    <link href="https://jessemcdowell.ca//2011/10/managing-priorities-outside-of-work/"/>
    <id>https://jessemcdowell.ca//2011/10/managing-priorities-outside-of-work/</id>
    <published>2011-10-07T02:55:07.000Z</published>
    <updated>2023-05-01T18:55:47.373Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been fortunate to take some serious down time during the summer. After working pretty much non-stop for ten years, things have piled up. I took some time to rest, then got to work on some personal projects that have been neglected far too long.</p><p>What I’ve learned, however, is that it takes more than time to get things done. After about a month, pretty much all I’d achieved was completing a couple video games, and putting all the things I wanted to do into one very long list.</p><p>My first thought was that I wasn’t focusing, so after listening to <a href="https://hanselminutes.com/268/personal-systems-of-organization-rey-bango-interviews-scott-hanselman">a podcast by Scott Hanselman about organization</a>, I decided to try the <a href="https://www.pomodorotechnique.com/">Pomodoro Technique</a>. This is a fairly simple system where you try to focus completely on a task for 25 minutes at a time, shutting out all distractions.</p><p>After a bit of Internet searching with no results, I started making my own pomodoro timer application. I had something working in a couple hours, barely holding myself back from adding sounds and animations. It would have been a lot faster, but I wasn’t completely focused on the task.</p><p>Armed with my timer, ready to experience my first burst of productivity, my wife came home from work. I told her excitedly how I’d built this magical thing, and how I’m going to start getting so much done. Then she asks me one simple question, “Why didn’t you use the timer from the kitchen?” This is when I realized that my problem was focus on a whole other level. I was doing work, but I wasn’t doing the right work.</p><p>This is a common problem in the software world: getting overwhelmed by a giant list of tasks, doing a little bit of everything, and completing nothing. I’ve experienced this first hand, and have been using effective tools for dealing with it for years, but I had never considered applying them to my personal life.</p><p>I tried a few things next, but the best help came from the book <a href="https://www.gettingresults.com/">Getting Results the Agile Way</a>, which was also mentioned in the podcast. It combines agile philosophy with some ideas about balancing life priorities and energy levels. I’m not committed to the entire process, but the parts I am trying have already made a big difference. By focusing on three goals a day, I’m now managing to plow through even dauntingly large tasks. Though I’m not doing everything on my list, I’m getting the most important things done, and because I feel that I’m making progress again it’s motivating me to work harder.</p><p>Taking the time off has been really good for me. Beyond organizing my personal priorities, I’ve also been organizing my main workspaces: my office, and my kitchen. You could say the experience is like rebooting a computer; it took a bit of time, but now I feel fresh and full of life, ready to tackle something new.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been fortunate to take some serious down time during the summer. After working pretty much non-stop for ten years, things have piled
      
    
    </summary>
    
    
      <category term="career" scheme="https://jessemcdowell.ca/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>Doubling Data for Performance Testing</title>
    <link href="https://jessemcdowell.ca//2011/08/doubling-data-for-performance-testing/"/>
    <id>https://jessemcdowell.ca//2011/08/doubling-data-for-performance-testing/</id>
    <published>2011-08-12T04:22:26.000Z</published>
    <updated>2021-01-30T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Or: The Most Impressive T-SQL Script I’ve Ever Written</strong></p><p>I was recently working on a new application. After three months in the field, users were starting to complain about performance issues. We had done some limited performance tuning for the first release, and more as part of the second release, but new issues were popping up as more data got entered into the system. We could have continued fixing issues as they came up, one release at a time, but we wanted to get ahead of the problem, and the client wanted to know that the system would remain usable without developer intervention for a few years at least.</p><p>The nature of the business was such that the rate of data entry and number of concurrent users shouldn’t change much over time. This meant that increasing the amount of data would be a good approximation of how the system would look in the future. How do you increase the amount of data in a normalized relational database? It would be difficult to enter realistic test data manually, and unrealistic test data can cause unrealistic test results. Bad results means we waste time fixing issues that wouldn’t appear, and never get a chance to detect issues that will.</p><p>I proposed creating a T-SQL script that would double all the existing data. Running it once would simulate six months of usage, running it again simulates a year, twice more and we’re simulating four years of usage. Once it was approved, it took me a couple days to finish, about half of that going to testing and debugging. The result is the most impressive T-SQL script I’ve ever written.</p><p>The script I wrote didn’t do the actual duplication, it combined hand-entered metadata with data from sys.tables and sys.columns to generate a much bigger script. Not only was it faster to write this way, but it made it easier to fix issues, and it allowed the script to be reused after columns were added to the database.</p><p>I had one table variable with a list of tables to copy, and another defining the relationships between foreign keys and their source tables. Most foreign keys were named the same in all tables that they appeared in, so a single mapping was often enough for all of them. Most of the mappings could be determined from the list of tables itself, so I only had a few other relationships and special column rules that had to be entered manually.</p><p>Another factor that helped was our use of guids for all primary keys. Because the can be determined before inserting a row, it was possible to generate the mapping from old to new key at the start of the script. I could also use a single insert statement for each table, and the order of execution only mattered where foreign key constraints existed.</p><p>The results were tremendous. We found a bunch of issues we wouldn’t have found otherwise, and had a fairly solid indication of how the application would behave years in the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Or: The Most Impressive T-SQL Script I’ve Ever Written&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was recently working on a new application. After three m
      
    
    </summary>
    
      <category term="uncategorized" scheme="https://jessemcdowell.ca/categories/uncategorized/"/>
    
    
      <category term="database" scheme="https://jessemcdowell.ca/tags/database/"/>
    
      <category term="performance" scheme="https://jessemcdowell.ca/tags/performance/"/>
    
      <category term="debugging" scheme="https://jessemcdowell.ca/tags/debugging/"/>
    
  </entry>
  
  <entry>
    <title>The Critical Path</title>
    <link href="https://jessemcdowell.ca//2011/06/the-critical-path/"/>
    <id>https://jessemcdowell.ca//2011/06/the-critical-path/</id>
    <published>2011-06-25T16:58:08.000Z</published>
    <updated>2021-01-30T03:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>For the last ten years, if you had asked, I would have told you with some conviction that a “critical path” is a kind of test script that tests the essential functionality of a system. If the app passes it’s critical path test, I would have said, it may not delight users, but it’s unlikely that they’ll storm your basement with torches and pitchforks.</p><p>It came up at work during a discussion about interview questions. My colleague was both proud and surprised to have been the only person interviewed for his position that had known what it really means.</p><p>A critical path is a project management term that refers to the chain of dependant tasks that will take the longest amount of time in a project plan. For example, if I were to make a project plan for my breakfast on Sunday morning, it would look like this:</p><img src="/2011/06/the-critical-path/BreakfastOnSunday.png" class="" title="The plan for my Sunday morning breakfast."><p>In this plan, making pancakes is the critical path. With an unlimited amount of people, and an unlimited amount of kitchen space, and all the resources and tools we would need, the fastest that we could produce my Sunday morning breakfast is the time it takes to make pancakes.</p><p>I can steam milk, flip pancakes, and toss a couple eggs in the pan all at the same time, but grinding coffee beans and mixing the pancake batter has to be done one at a time. This breakfast takes me just a few minutes longer than the critical path, so it’s not worth hiring a sous chef.</p><p>The time of a software projects is usually shaped more by the number of developers. We usually have a lot of features to deliver, and most of them are not directly dependant on each other. What you can see is a part at the beginning and end of a project where it’s hard to keep multiple people working, but that’s a whole other thing.</p><img src="/2011/06/the-critical-path/GenericSoftwareProject.png" class="" title="A generic project plan showing a chain of blocking tasks at the beginning and end of a project."><p>When a critical path is defining the time line for your project, it’s important to identify it; any step that gets delayed affects the entire chain. You should start these tasks as soon as possible, and do what you can to stop them from getting blocked.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For the last ten years, if you had asked, I would have told you with some conviction that a “critical path” is a kind of test script that
      
    
    </summary>
    
    
      <category term="project management" scheme="https://jessemcdowell.ca/tags/project-management/"/>
    
  </entry>
  
</feed>
